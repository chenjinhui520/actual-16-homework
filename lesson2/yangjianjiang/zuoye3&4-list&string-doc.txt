#作业三and作业四
#列表帮助文档解读

#1、list.append()
Docstring: L.append(object) -- append object to end
解读：
1. 功能：追加对象到末尾
2. 返回值：无
3. 示例:
In [4]: list1 = ['a','b','c','d','d']
In [5]: list1.append('f')
In [6]: list1
Out[6]: ['a', 'b', 'c', 'd', 'd', 'f']
In [7]: list1.append(1)
In [8]: list1
Out[8]: ['a', 'b', 'c', 'd', 'd', 'f', 1]
In [9]: list1.append(True)
In [10]: list1
Out[10]: ['a', 'b', 'c', 'd', 'd', 'f', 1, True]



#2、list.count()
Docstring: L.count(value) -> integer -- return number of occurrences of value
解读：
1、功能：统计值在列表中出现的次数
2、返回值：返回一个整数，即出现的次数
3、示例：
In [14]: list1
Out[14]: ['a', 'b', 'c', 'd', 'd', 'f', 1, True, 1, False]
In [15]: list1.count('d')
Out[15]: 2
In [16]: list1.count(1)
Out[16]: 3
In [17]: list1.count(True)
Out[17]: 3

#3、list.extend()
Docstring: L.extend(iterable) -- extend list by appending elements from the iterable
解读：
1、功能：将可迭代的序列扩展在列表的后面
2、返回值：无
3、示例：
In [18]: list2 = ['hello','welcome','reboot']
In [19]: list1
Out[19]: ['a', 'b', 'c', 'd', 'd', 'f', 1, True, 1, False]
In [20]: list1.extend(list2)
In [21]: list1
Out[21]: ['a', 'b', 'c', 'd', 'd', 'f', 1, True, 1, False, 'hello', 'welcome', 'reboot']


#4、list.index()

L.index(value, [start, [stop]]) -> integer -- return first index of value.
Raises ValueError if the value is not present.
、解读：
1、功能：查到第一个被找到的索引值，也可以指定起始位置和结束位置来查找
2、返回值：整数值，即索引的值
3、返回错误：有，当找不到值时返回错误
4、示例：
In [26]: list1
Out[26]: ['a', 'b', 'c', 'd', 'd', 'f', 1, True, 1, False, 'hello', 'welcome', 'reboot']
In [27]: list1.index('d')
Out[27]: 3
In [28]: list1.index(1)
Out[28]: 6


#5、list.insert()

Docstring: L.insert(index, object) -- insert object before index
解读：
1、功能：插入一个对象到指定索引值前
2、返回值：无
3、示例：
In [29]: list1
Out[29]: ['a', 'b', 'c', 'd', 'd', 'f', 1, True, 1, False, 'hello', 'welcome', 'reboot']
In [30]: list1.insert(3,'e')
In [31]: list1
Out[31]:
['a',
 'b',
 'c',
 'e',
 'd',
 'd',
 'f',
 1,
 True,
 1,
 False,
 'hello',
 'welcome',
 'reboot']


#6、list.pop()

L.pop([index]) -> item -- remove and return item at index (default last).
Raises IndexError if list is empty or index is out of range.
解读：
1、功能：通过索引值来删除对象，可以为空，默认是删除最后一个对象，并返回被删除的对象
2、返回值：有，被删除的对象
3、示例：
In [32]: list1
Out[32]:
['a',
 'b',
 'c',
 'e',
 'd',
 'd',
 'f',
 1,
 True,
 1,
 False,
 'hello',
 'welcome',
 'reboot']
In [33]: list1.pop()
Out[33]: 'reboot'
In [34]: list1.pop(3)
Out[34]: 'e'
In [35]: list1
Out[35]: ['a', 'b', 'c', 'd', 'd', 'f', 1, True, 1, False, 'hello', 'welcome']

#7、list.remove()
L.remove(value) -- remove first occurrence of value.
Raises ValueError if the value is not present.
解读：
1、功能：删除被找到的第一个对象（如存在相同的多个对象的情形下）
2、返回值：无
3、返回错误：有，当找不到对象时返回错误信息
4、示例：
In [37]: list1
Out[37]: ['a', 'b', 'c', 'd', 'f', 'd', 'f', 1, True, 1, False, 'hello', 'welcome']
In [38]: list1.remove('d')
In [39]: list1
Out[39]: ['a', 'b', 'c', 'f', 'd', 'f', 1, True, 1, False, 'hello', 'welcome']
In [130]: list1.remove('g')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-130-62b67aedbb4b> in <module>()
----> 1 list1.remove('g')

ValueError: list.remove(x): x not in list


#8、list.reverse()
Docstring: L.reverse() -- reverse *IN PLACE*

解读：
1、功能：将列表反转
2、返回值：无
3、示例：

In [131]: list1
Out[131]: [False, 1, True, 1, 'a', 'b', 'c', 'd', 'f', 'f', 'hello', 'welcome']

In [132]: list1.reverse()

In [133]: list1
Out[133]: ['welcome', 'hello', 'f', 'f', 'd', 'c', 'b', 'a', 1, True, 1, False]


#9、list.sort()
L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;
cmp(x, y) -> -1, 0, 1

解读：
1、功能：列表排序
2、返回值：无
3、示例：

In [40]: list1
Out[40]: ['a', 'b', 'c', 'f', 'd', 'f', 1, True, 1, False, 'hello', 'welcome']
In [41]: list1.sort()
In [42]: list1
Out[42]: [False, 1, True, 1, 'a', 'b', 'c', 'd', 'f', 'f', 'hello', 'welcome']

In [49]: list2 = [ 5,6,3,9,2,3 ]
In [50]: list2
Out[50]: [5, 6, 3, 9, 2, 3]
In [51]: list2.sort()
In [52]: list2
Out[52]: [2, 3, 3, 5, 6, 9]




#字符串的帮助文档解读

#1、s.strip
Docstring:
S.strip([chars]) -> string or unicode

Return a copy of the string S with leading and trailing
whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is unicode, S will be converted to unicode before stripping
解读：
1、功能：删除前面和后面的空白字符串（空格和回车），也可以指定字符串删除
2、返回值：字符串或者unicode
3、示例：
In [68]: s = '''
    ...:
    ...: abcnd
    ...: hah
    ...: hello world!
    ...:
    ...: '''

In [69]: s
Out[69]: ' \n\nabcnd\nhah\nhello world!\n \n'

In [70]:

In [70]: s.strip()
Out[70]: 'abcnd\nhah\nhello world!'



#2、s.lstrip
Docstring:
S.lstrip([chars]) -> string or unicode

Return a copy of the string S with leading whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is unicode, S will be converted to unicode before stripping
解读：
1、功能：删除前面的空白字符串，也可以指定字符串删除
2、返回值：字符串或者unicode
3、示例：
In [72]: s
Out[72]: '\n\nabcnd\nhah\nhello world!\n\n'

In [73]: s.lstrip()
Out[73]: 'abcnd\nhah\nhello world!\n\n'


#3、s.rstrip
Docstring:
S.rstrip([chars]) -> string or unicode
Return a copy of the string S with trailing whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is unicode, S will be converted to unicode before stripping
解读：
1、功能：删除后面的空白字符串，也可以指定字符串删除
2、返回值：字符串或者unicode
3、示例：


In [83]: s
Out[83]: '             adf\nasfadsfdf\nasdfdsf\nsdf\nasdf\nsdf\n                   '
In [84]: s.lstrip(' ')
Out[84]: '
In [85]: s
Out[85]: '             adf\nasfadsfdf\nasdfdsf\nsdf\nasdf\nsdf\n                   '
In [86]: s.lstrip()
Out[86]: 'adf\nasfadsfdf\nasdfdsf\nsdf\nasdf\nsdf\n                   '
In [87]: s.rstrip()
Out[87]: '             adf\nasfadsfdf\nasdfdsf\nsdf\nasdf\nsdf'
In [88]: s.strip()
Out[88]: 'adf\nasfadsfdf\nasdfdsf\nsdf\nasdf\nsdf'
In [89]: s.rstrip(' ')  ##指定删除空格
Out[89]: '             adf\nasfadsfdf\nasdfdsf\nsdf\nasdf\nsdf\n'



#4、s.find
Docstring:
S.find(sub [,start [,end]]) -> int

Return the lowest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.

Return -1 on failure.

解读：
1、功能：在字符串中查找子字符串
2、返回值：整数，从头查找到的字符串的索引值
3、错误：查找不到的时候返回-1
3、示例：
In [90]: s = '''
    ...: abccd
    ...: abcd
    ...: sfdk'al;f
    ...: qwertyuiop
    ...: asdfghjkl
    ...: zxcvbnm
    ...: abccd
    ...: '''
In [91]: s.find('b')
Out[91]: 2
In [92]: s.find('ab')
Out[92]: 1
In [93]: s.find('a')
Out[93]: 1
In [94]: s.find('abcd')
Out[94]: 7
In [95]: s.find('abccccd')
Out[95]: -1


#5、join
S.join(iterable) -> string

Return a string which is the concatenation of the strings in the
iterable.  The separator between elements is S.
解读：
1、功能：通过指定的格式连接字符串
2、返回值：字符串
3、示例：
In [98]: '*'.join(s)
Out[98]: "\n*a*b*c*c*d*\n*a*b*c*d*\n*s*f*d*k*'*a*l*;*f*\n*q*w*e*r*t*y*u*i*o*p*\n*a*s*d*f*g*h*j*k*l*\n*z*x*c*v*b*n*m*\n*a*b*c*c*d*\n"
In [99]: '--'.join(s)
Out[99]: "\n--a--b--c--c--d--\n--a--b--c--d--\n--s--f--d--k--'--a--l--;--f--\n--q--w--e--r--t--y--u--i--o--p--\n--a--s--d--f--g--h--j--k--l--\n--z--x--c--v--b--n--m--\n--a--b--c--c--d--\n"
In [100]: ','.join(s)
Out[100]: "\n,a,b,c,c,d,\n,a,b,c,d,\n,s,f,d,k,',a,l,;,f,\n,q,w,e,r,t,y,u,i,o,p,\n,a,s,d,f,g,h,j,k,l,\n,z,x,c,v,b,n,m,\n,a,b,c,c,d,\n"

#6、s.lower
Docstring:
S.lower() -> string
Return a copy of the string S converted to lowercase.
解读：
1、功能：将拷贝的字符串都变成小写
2、返回值：字符串
3、示例：
In [101]: s = "ACBDefsGHJtf"
In [102]: s.lower()
Out[102]: 'acbdefsghjtf'
In [103]: s
Out[103]: 'ACBDefsGHJtf'


#7、s.upper
Docstring:
S.upper() -> string
Return a copy of the string S converted to uppercase.
解读：
1、功能：将拷贝的字符串都变成大写
2、返回值：字符串
3、示例：
In [103]: s
Out[103]: 'ACBDefsGHJtf'
In [104]: s.upper()
Out[104]: 'ACBDEFSGHJTF'
In [105]: s
Out[105]: 'ACBDefsGHJtf'

#8、s.replace
Docstring:
S.replace(old, new[, count]) -> string
Return a copy of string S with all occurrences of substring
old replaced by new.  If the optional argument count is
given, only the first count occurrences are replaced.
解读：
1、功能：将拷贝的字符串中子字符串替换成新的子字符串，还可以指定替换次数
2、返回值：字符串
3、示例：
In [106]: s = "abcaklfabcsaldfjabcslfjabcsdf"

In [107]: s.replace('abc','ABC')
Out[107]: 'ABCaklfABCsaldfjABCslfjABCsdf'

In [108]: s.replace('abc','ABC',2)
Out[108]: 'ABCaklfABCsaldfjabcslfjabcsdf'

In [109]: s.replace('abc','1111',2)
Out[109]: '1111aklf1111saldfjabcslfjabcsdf'

In [110]: s.replace('abc','1111')
Out[110]: '1111aklf1111saldfj1111slfj1111sdf'



#9、s.startswith
Docstring:
S.startswith(prefix[, start[, end]]) -> bool

Return True if S starts with the specified prefix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
prefix can also be a tuple of strings to try.
解读：
1、功能：判断起始字符串是否正确
2、返回值：布尔值，True：是，False：否
3、示例：
In [116]: s
Out[116]: 'abcaklfabcsaldfjabcslfjabcsdf'

In [117]: s.startswith('a')
Out[117]: True

In [118]: s.startswith('ab')
Out[118]: True

In [119]: s.startswith('abc')
Out[119]: True

In [120]: s.startswith('b')
Out[120]: False



#10、s.endswith
Docstring:
S.endswith(suffix[, start[, end]]) -> bool

Return True if S ends with the specified suffix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
suffix can also be a tuple of strings to try.
解读：
1、功能：判断结尾字符串是否正确
2、返回值：布尔值，True：是，False：否
3、示例：
In [121]: s
Out[121]: 'abcaklfabcsaldfjabcslfjabcsdf'

In [122]: s.endswith('f')
Out[122]: True

In [123]: s.endswith('df')
Out[123]: True

In [124]: s.endswith('d')
Out[124]: False



#11、s.count
Docstring:
S.count(sub[, start[, end]]) -> int

Return the number of non-overlapping occurrences of substring sub in
string S[start:end].  Optional arguments start and end are interpreted
as in slice notation.
解读：
1、功能：统计子字符串在字符串中出现的次数
2、返回值：整数，即子字符串出现的次数
3、示例：
In [125]: s
Out[125]: 'abcaklfabcsaldfjabcslfjabcsdf'

In [126]: s.count('a')
Out[126]: 6

In [127]: s.count('abc')
Out[127]: 4




